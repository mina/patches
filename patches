#!/bin/sh
#
# Workflow:
# git co -b my-branch --track net-next/main
# vim ...
# git a .
# git cm -m "my patch"
#
# # Creates patches under patches.my-branch/
# patches create -v 1
#
# # clang-format each patch in a git rebase --exec
# patches clang_format
#
# # Runs checkpatch
# patches checkpatch
#
# # Runs patch-by-patch W=1 C=1 in a git rebase --exec
# patches build_each_patch
#	# if you run into errors
#	vim ...				# fix the errors
#	git cm --amend			# commit the fixes
#	build_patch_with_checks.sh	# check if the errors still happen
#	git rebase --continue		# Carry on with the patch-by-patch build
#
# # Build patch-by-patch allmodconfig in a git rebase --exec
# patches build_allmodconfig_each_patch
#
# # Build all configs in `ls ../<branch name>/*.config`
# patches build_configs
#
# # Run all non build presubmits (faster)
# patches presubmit_no_builds
#
# # Run all the checks
# patches presubmit
#
# # Run a set of nipa tests
# patches patches nipa_single_test patch/deprecated_api,patch/verify_signedoff
#
# # Send the patches
# patches send -v 1
#
# # Also available is send_no_confirm, which presubmits then sends with no
# # prompt
# patches send_no_confirm -v 1

set -euo pipefail
# Turn on for debugging
set -ex

TEST="${TEST:-0}"
RFC="${RFC:-0}"
SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

head=$(git rev-parse --abbrev-ref --symbolic-full-name HEAD)
parent=$(git rev-parse --abbrev-ref --symbolic-full-name @{u})
tree="${parent:0:-5}"
RANGE="${RANGE:-"$parent..HEAD"}"
git_send_to="netdev@vger.kernel.org"

echoerr() { cat <<< "$@" 1>&2; }

function create() {
	rm -rf "patches.$head"/*.patch

	local cover_letter=""
	set +e
	git config branch.$head.description > .description.txt && \
		cover_letter="1"
	set -e

	count=$(($(git rev-list --count "$RANGE")))

	if [[ $count < 1 ]]; then
		echo "Not enough commits in range: $count"
		exit 1
	fi

	if [[ $count > 1 ]] && [ ! -z "$cover_letter" ]; then
		cover_letter="--cover-letter --cover-from-description=auto --description-file=.description.txt"
	else
		cover_letter=""
	fi

	local to=$(git diff "$RANGE" | ./scripts/get_maintainer.pl \
		--no-git-fallback --norolestats -nom -nor --nomoderated \
		--nomultiline)

	local cc=$(git diff "$RANGE" | ./scripts/get_maintainer.pl \
		--no-git-fallback --norolestats -nol --nomoderated --nomultiline)

	if [[ $RFC == 0 ]]; then
		PREFIX="PATCH $tree"
	else
		PREFIX="PATCH RFC $tree"
	fi

	local files=$(git format-patch \
		--base $parent \
		-o "patches.$head" \
		"$RANGE" \
		$cover_letter \
		--to="$to" \
		--cc="$cc" \
		--subject-prefix="$PREFIX" \
		"$@")

	# Delete change-id
	for file in $files; do
		sed '/Change-Id:/d' $file -i
	done

	echo $files
}

send() {
	local files=$(create $@)
	CONFIRM=${CONFIRM:-}

	if [[ $TEST == 0 ]]; then
		DRY_RUN=""
	else
		DRY_RUN="--dry-run"
	fi

	yes | git send-email $files --to="$git_send_to" --cc-cover --8bit-encoding=UTF-8 $CONFIRM $DRY_RUN || true

	git tag "$(date +%F-%s)-$head-$FUNCNAME"
}

checkpatch() {
	local files=$(create $@)
	local tmpfile=$(mktemp)

	# checkpatch
	for file in $files; do
		if grep "not-for-review" $file; then
			exit 1
		fi
		set +e
		./scripts/checkpatch.pl --patch $file --codespell | tee $tmpfile
		errors=$(grep -c "ERROR" $tmpfile)
		set -e
		if [ $errors -gt 0 ]; then
			exit $errors
		fi
	done

	rm -rf $tmpfile

	local tmpfile=$(mktemp)

	# kernel-doc
	local touched=$(git diff "$RANGE" --name-only)
	echo kernel-doc...
	for file in $touched; do
		./scripts/kernel-doc -none $file 2>&1 | tee $tmpfile
		set +e
		errors=$(grep -i -c "\(warn\|error\)" $tmpfile)
		set -e
		if [ $errors -gt 0 ]; then
			exit $errors
		fi
	done
	echo done kernel-doc
}

# Runs a command on each patch
cmd_each_patch() {
	local cmd="$1"

	echo
	echo "rebasing exec $cmd"
	git rebase --exec \
		"git show | grep -q \"not-for-review\" || $cmd" \
		$parent
}


build_allmodconfig_each_patch() {
	local dir=build_allmodconfig/

	make allmodconfig O=$dir
	cmd_each_patch " make -s -j`nproc` O=$dir"

	echo "Test build patches succeeded"
}

build_each_patch() {
	make mrproper

	touch .first_in_series

	cmd_each_patch "PATCHES_CONFIG=\"$SCRIPT_DIR/configs/test.config\" ~/patches/build_patch_with_checks.sh"

	echo "Test build patches succeeded"
}

clang_format() {
	cmd_each_patch "git diff -U0 --no-color HEAD~ | /usr/lib/clang-format/clang-format-diff.py -i -p1"
}

build_configs() {
	local rc=0
	local dir=allnoconfig/

	make mrproper

	for config in $(ls "$SCRIPT_DIR/configs"); do
		KCONFIG_ALLCONFIG="$SCRIPT_DIR/configs/$config" make allnoconfig -s O=$dir
		make -j`nproc` -s O=$dir || rc=$?
	done

	make allnoconfig -s O=$dir
	make -j`nproc` -s O=$dir || rc=$?

	echo $rc
}

deprecated_api() {
	cmd_each_patch "~/nipa/tests/patch/deprecated_api/deprecated_api.sh"
}

presubmit_no_builds() {
	git fetch $tree

	git rebase

	deprecated_api

	checkpatch

	check_ynl
}

presubmit() {
	presubmit_no_builds

	local rc=$(build_configs)
	if [[ $rc != 0 ]]; then
		exit $rc
	fi

	build_each_patch

	build_allmodconfig_each_patch

	git tag "$(date +%F-%s)-$head-$FUNCNAME"
}

send_no_confirm() {
	presubmit

	CONFIRM="--confirm=never" send $@
}

check_ynl() {
	./tools/net/ynl/ynl-regen.sh -f

	if ! git diff --quiet; then
		echo "Tree is dirty after regen"
		exit 1
	fi
}

nipa_single_test() {
	single_test="$1"

	create

	cat > nipa.config <<EOF
		[log]
		type = stdout
		path = none
		file = none

		[results]
		dir = ./patches.nipa/results

		[dirs]
		tests = $SCRIPT_DIR/nipa/tests

		[tests]
		include = $single_test
EOF

	rm -rf ./patches.nipa/
	mkdir -p ./patches.nipa/

	git branch -D nipa-scratch || true
	git checkout -b nipa-scratch

	$SCRIPT_DIR/nipa/ingest_mdir.py \
	  --mdir $(pwd)/patches.$head \
	  --tree $(pwd) --tree-name $tree --tree-branch $tree/main
	echo $?

	git checkout $head
}

command="$1"
shift

if [ "$command" == "create" ]; then
	create $@
elif [ "$command" == "send" ]; then
	send $@
elif [ "$command" == "send_no_confirm" ]; then
	send_no_confirm $@
elif [ "$command" == "checkpatch" ]; then
	checkpatch $@
elif [ "$command" == "build_each_patch" ]; then
	build_each_patch $@
elif [ "$command" == "build_allmodconfig_each_patch" ]; then
	build_allmodconfig_each_patch $@
elif [ "$command" == "presubmit" ]; then
	presubmit $@
elif [ "$command" == "presubmit_no_builds" ]; then
	presubmit_no_builds $@
elif [ "$command" == "clang_format" ]; then
	clang_format $@
elif [ "$command" == "build_configs" ]; then
	rc=$(build_configs $@)
	exit $rc
elif [ "$command" == "check_ynl" ]; then
	check_ynl $@
elif [ "$command" == "nipa_single_test" ]; then
	nipa_single_test $@
fi
